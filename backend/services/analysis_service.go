// analysis_service
package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"legally/repositories"
	"legally/utils"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/gin-gonic/gin"
	"golang.org/x/net/context"
)

const (
	model       = "deepseek/deepseek-r1-0528:free"
	apiEndpoint = "https://openrouter.ai/api/v1/chat/completions"
)

type HttpError struct {
	Status  int
	Message string
}

func AnalyzeDocument(c *gin.Context) (interface{}, *HttpError) {
	utils.LogAction("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

	text, filename, err := utils.ProcessUploadedFile(c)
	if err != nil {
		utils.LogError(err.Error())
		return nil, &HttpError{Status: http.StatusBadRequest, Message: err.Error()}
	}

	utils.LogInfo(fmt.Sprintf("–ò–∑–≤–ª–µ—á–µ–Ω–æ %d —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞", len(text)))

	analysis, docType, err := AnalyzeText(text)
	if err != nil {
		utils.LogError(err.Error())
		return nil, &HttpError{Status: http.StatusInternalServerError, Message: err.Error()}
	}

	userID, _ := c.Get("userId")
	err = repositories.SaveAnalysis(userID.(string), filename, docType, analysis, text)
	if err != nil {
		utils.LogWarning(fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB: %v", err))
	}

	// üîµ –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –≤ Pinecone
	err = SendToPinecone(
		userID.(string),
		text,
		map[string]string{
			"filename": filename,
			"type":     docType,
		},
	)
	if err != nil {
		utils.LogWarning(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Pinecone: %v", err))
	}

	utils.LogSuccess("–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É")
	utils.LogInfo(fmt.Sprintf("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: %s, –¥–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", docType, len(analysis)))

	return gin.H{
		"analysis":      analysis,
		"timestamp":     time.Now().Format(time.RFC3339),
		"document_type": docType,
		"filename":      filename,
	}, nil
}

func AnalyzeText(text string) (string, string, error) {
	parts := utils.SplitText(text, 12000)
	utils.LogInfo(fmt.Sprintf("–î–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ %d —á–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", len(parts)))

	var analysisResults []string
	for i, part := range parts {
		partNum := i + 1
		utils.LogAction(fmt.Sprintf("–ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏ %d/%d...", partNum, len(parts)))

		result, err := analyzeDocumentPart(part)
		if err != nil {
			utils.LogError(fmt.Sprintf("–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Å—Ç–∏ %d: %v", partNum, err))
			return "", "", err
		}

		utils.LogSuccess(fmt.Sprintf("–ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏ %d –∑–∞–≤–µ—Ä—à—ë–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª–∏–Ω–æ–π %d —Å–∏–º–≤–æ–ª–æ–≤", partNum, len(result)))
		analysisResults = append(analysisResults, result)
	}

	fullAnalysis := strings.Join(analysisResults, "\n\n---\n\n")
	docType := detectDocumentType(text)

	return fullAnalysis, docType, nil
}

func analyzeDocumentPart(text string) (string, error) {
	prompt := fmt.Sprintf(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. 

–í –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:

### –ü—Ä–∞–≤–æ–≤—ã–µ —Ä–∏—Å–∫–∏

1. [–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞]
   - –û–ø–∏—Å–∞–Ω–∏–µ: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]
   - –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç: [–∑–∞–∫–æ–Ω/—Å—Ç–∞—Ç—å—è]
   - –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: [–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π]
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é]

2. [–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞]
   ...

### –ù–µ—è—Å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏

1. [–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞]
   - –ü—Ä–æ–±–ª–µ–º–∞: [–≤ —á–µ–º –Ω–µ—è—Å–Ω–æ—Å—Ç—å]
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: [–∫–∞–∫ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å]
   - –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: [–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π]

### –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è

1. [–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è]
   - –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç: [–∑–∞–∫–æ–Ω/—Å—Ç–∞—Ç—å—è]
   - –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è: [–≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏]
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: [–∫–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å]

### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

[–°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞]

### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

[–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É —Å –≤—ã–≤–æ–¥–∞–º–∏]

–î–æ–∫—É–º–µ–Ω—Ç:
%s`, text)

	utils.LogInfo(fmt.Sprintf("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª–∏–Ω–æ–π %d —Å–∏–º–≤–æ–ª–æ–≤", len(text)))

	result, err := queryOpenRouter(prompt)
	if err != nil {
		return "", err
	}

	utils.LogSuccess(fmt.Sprintf("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª–∏–Ω–æ–π %d —Å–∏–º–≤–æ–ª–æ–≤", len(result)))
	return result, nil
}

func queryOpenRouter(prompt string) (string, error) {
	apiKey := os.Getenv("OPENROUTER_API_KEY")
	if apiKey == "" {
		return "", fmt.Errorf("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	payload := map[string]interface{}{
		"model": model,
		"messages": []map[string]string{
			{"role": "system", "content": "–¢—ã ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–∞–≤–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã."},
			{"role": "user", "content": prompt},
		},
		"temperature": 0.3,
		"max_tokens":  4000,
	}

	body, err := json.Marshal(payload)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ payload: %w", err)
	}

	utils.LogRequest("out", apiEndpoint, len(body))

	req, err := http.NewRequest("POST", apiEndpoint, bytes.NewBuffer(body))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req.Header.Set("Authorization", "Bearer "+apiKey)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("HTTP-Referer", "https://legally.kz")
	req.Header.Set("X-Title", "Legally AI Risk Analyzer")

	client := &http.Client{Timeout: 120 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter: %w", err)
	}
	defer resp.Body.Close()

	resBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ OpenRouter: %w", err)
	}

	utils.LogRequest("in", fmt.Sprintf("OpenRouter (—Å—Ç–∞—Ç—É—Å: %d)", resp.StatusCode), len(resBody))

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç OpenRouter: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
	}

	var res struct {
		Choices []struct {
			Message struct {
				Content string `json:"content"`
			} `json:"message"`
		} `json:"choices"`
	}

	if err := json.Unmarshal(resBody, &res); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç AI: %w", err)
	}

	if len(res.Choices) == 0 || res.Choices[0].Message.Content == "" {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter")
	}

	return res.Choices[0].Message.Content, nil
}

func GetRelevantLaws() []map[string]string {
	return []map[string]string{
		{"name": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–ö", "url": "https://adilet.zan.kz/rus/docs/K950001000_"},
		{"name": "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–ö", "url": "https://adilet.zan.kz/rus/docs/K2100000409"},
		{"name": "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–ö", "url": "https://adilet.zan.kz/rus/docs/K1500000011"},
		{"name": "–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –†–ö", "url": "https://adilet.zan.kz/rus/docs/K1400000233"},
	}
}

func GetUserHistory(userID string) ([]map[string]interface{}, error) {
	return repositories.GetUserHistory(userID)
}

func detectDocumentType(text string) string {
	text = strings.ToLower(text)
	switch {
	case strings.Contains(text, "–¥–æ–≥–æ–≤–æ—Ä"):
		return "–î–æ–≥–æ–≤–æ—Ä"
	case strings.Contains(text, "–ø—Ä–∏–∫–∞–∑"):
		return "–ü—Ä–∏–∫–∞–∑"
	case strings.Contains(text, "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"):
		return "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
	case strings.Contains(text, "–∑–∞–∫–æ–Ω"):
		return "–ó–∞–∫–æ–Ω"
	case strings.Contains(text, "—Ä–µ—à–µ–Ω–∏–µ"):
		return "–†–µ—à–µ–Ω–∏–µ"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}

var (
	userCache      = make(map[string]string)
	activeAnalysis = make(map[string]context.CancelFunc)
	cacheMutex     sync.Mutex
)

func CancelUserAnalysis(userID string) error {
	cacheMutex.Lock()
	defer cacheMutex.Unlock()

	if cancel, exists := activeAnalysis[userID]; exists {
		cancel()
		delete(activeAnalysis, userID)
		delete(userCache, userID)
		return nil
	}
	return fmt.Errorf("–∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
}

func ClearUserCache(userID string) error {
	cacheMutex.Lock()
	defer cacheMutex.Unlock()

	delete(userCache, userID)
	return nil
}

func CacheUserFile(userID, content string) {
	cacheMutex.Lock()
	defer cacheMutex.Unlock()

	userCache[userID] = content
}

func GetCachedFile(userID string) (string, bool) {
	cacheMutex.Lock()
	defer cacheMutex.Unlock()

	content, exists := userCache[userID]
	return content, exists
}

func StartAnalysis(ctx context.Context, userID string, fn func()) context.Context {
	cacheMutex.Lock()
	defer cacheMutex.Unlock()

	ctx, cancel := context.WithCancel(ctx)
	activeAnalysis[userID] = cancel

	go func() {
		fn()
		cacheMutex.Lock()
		delete(activeAnalysis, userID)
		cacheMutex.Unlock()
	}()

	return ctx
}